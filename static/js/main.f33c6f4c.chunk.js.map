{"version":3,"sources":["components/Colors.jsx","components/Setting/ColoredButton.jsx","components/Setting/ColorList.js","components/Setting/Setting.jsx","components/Header/Header.jsx","components/Footer/Footer.jsx","components/Sider/Sider.jsx","components/Round.jsx","components/App.jsx","index.js"],"names":["Colors","props","roundNumber","isNewRound","gameOver","result","Array","map","n","index","colors","color","Button","className","variant","disabled","style","background","isCode","borderRadius","fontSize","padding","width","height","margin","onClick","onPicked","ColoredButton","fontWeight","myColors","includes","text","colorList","Setting","useState","setMyColors","num_colors","numColors","handleMyColors","target","prevItems","filter","addColor","id","chosen","length","newColors","i","newColor","Math","floor","random","push","generateRandomColors","onSubmit","Header","Footer","Sider","Round","round","setRound","num_code","numCode","_","new_round","slice","App","setColors","code","setCode","rounds","setRounds","results","setResults","setGameOver","positionMatch","matchingColors","nth","colorMatch","Set","prevRounds","prevResults","JSON","stringify","prevValue","newCode","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f33c6f4c.chunk.js","sourcesContent":["import React from \"react\";\nimport Button from '@material-ui/core/Button'\nimport { VscSymbolColor} from \"react-icons/vsc\";\nimport { GrLocationPin } from \"react-icons/gr\";\n\nfunction Colors(props) {\n  return <div>\n    {/* shows round number of both old and new rounds  */}\n    {props.roundNumber\n      &&\n      <div>\n        {props.isNewRound && props.gameOver? (\n          <h3>GameOver</h3>)\n        :\n          \n          <h3>round {props.roundNumber}</h3>\n        }\n        \n        {/* show matched position */}\n        { props.result &&\n          [...Array(props.result[0])].map((n, index) => <GrLocationPin key={index}/>)\n        }\n        {/* show matched color */}\n        { props.result &&\n          [...Array(props.result[1])].map((n, index) => <VscSymbolColor key={index}/>)\n        }\n        {\n          props.result && props.result[0]+props.result[1] === 0 \n          ? <div>\n              {/* <VscChromeClose style={{color:\"#ed6969\"}}/> */}\n              <h5>No Match!</h5>\n            </div> \n          : <div/>\n        }\n        \n\n      </div>\n    }\n    {props.colors.map((color,index)=>{\n      return (\n        <Button\n          className=\"colors\"\n          key={index}\n          variant=\"outlined\"\n          disabled={!props.isNewRound || props.gameOver} \n          style=\n          {{\n            background: !props.isCode && color,\n            borderRadius: \"40%\",\n            fontSize: \"15px\",\n            padding: \"20px 0px\",\n            width: \"5px\",\n            height: \"20px\",\n            margin: \"3px 3px\",\n          }}\n          onClick={()=>props.onPicked(color,index)}\n        >\n        {props.isCode? \"?\" : \"\"} \n        </Button>)\n    })}\n\n  </div>\n}\n\nexport default Colors;\n","import React from \"react\"\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\nfunction ColoredButton(props){\r\n\r\n    return (\r\n        <Button \r\n            onClick={()=>props.onPicked(props.color)} \r\n            variant=\"contained\"\r\n            style= {{\r\n                background:props.color,\r\n                margin: \"5px 5px\",\r\n                fontWeight: props.myColors.includes(props.color) ? 'bold' : 'normal'}}\r\n        >\r\n            { props.text ? props.text : props.color}\r\n        </Button>)\r\n}\r\n\r\nexport default ColoredButton","const colorList = [\"silver\", \"white\", \"tomato\", \"gold\", \"lightblue\", \"pink\", \"mediumslateblue\", \"orchid\", \"crimson\", \"rosybrown\", \"sandybrown\", \"turquoise\",\"sienna\", \"lightcoral\", \"palegreen\", \"burlywood\",\"olive\",\"papayawhip\",\"beige\", \"lightcyan\", \"lavender\",\"darksalmon\",\"thistle\",\"coral\", \"seagreen\", \"teal\", \"yellowgreen\", \"darkseagreen\", \"lightslategray\", \"purple\", \"dimgray\", \"hotpink\", \"darkslateblue\"] \r\n\r\nexport default colorList","import React, {useState} from \"react\"\r\nimport Button from '@material-ui/core/Button';\r\nimport ColoredButton from \"./ColoredButton\"\r\nimport colorList from \"./ColorList.js\"\r\n\r\nfunction Setting(props){\r\n    const [myColors, setMyColors] = useState([])\r\n    const num_colors = props.numColors\r\n\r\n    function handleMyColors(color){\r\n        !myColors.includes(color) ? addColor(color) : deleteColor(color)\r\n    }\r\n\r\n    function addColor(color){\r\n        setMyColors((prevItems)=> [...prevItems, color])\r\n    }\r\n\r\n    function deleteColor(target){\r\n        setMyColors((prevItems)=> {\r\n            return prevItems.filter((color) => color!==target)\r\n        })\r\n    }\r\n\r\n    function generateRandomColors(){\r\n        var newColors=[]\r\n        var i = 0\r\n        while (i<num_colors){\r\n            var newColor = colorList[Math.floor(Math.random()*colorList.length)]\r\n            if (!newColors.includes(newColor)){\r\n                newColors.push(newColor)\r\n                i++\r\n            }\r\n        }\r\n        setMyColors(newColors)\r\n        return myColors\r\n    }\r\n    return (\r\n    <div id=\"right-side\">\r\n        {/* show color list */}\r\n        <div className=\"color-plate\">\r\n            <h3>Choose your {num_colors} colors!</h3>\r\n            <div>\r\n                {colorList.map((color,index)=> \r\n                    <ColoredButton \r\n                        key = {index} \r\n            // require update:key should be unique\r\n                        color={color} \r\n                        onPicked={handleMyColors}\r\n                        chosen={false}\r\n                        myColors={myColors}\r\n                />)}\r\n            </div>\r\n        </div>\r\n        {/* show selected colors */}\r\n        <div className=\"color-plate\">\r\n            <h3>My Colors</h3>\r\n            <br/>\r\n            <div>\r\n                {myColors.length !== num_colors && \"Select \"+num_colors+\" Colors!\"}\r\n            </div>\r\n            <div>\r\n                {myColors.map((color,index)=> \r\n                    <ColoredButton \r\n                        key = {color+index} \r\n            // require update:key should be unique\r\n                        color={color} \r\n                        onPicked={handleMyColors}\r\n                        chosen={true}\r\n                        myColors={myColors}\r\n                />)}\r\n            </div>\r\n        <br/>\r\n        {/* generate random colors on click */}\r\n        <Button \r\n            style={{\r\n                margin:\"5px 5px\",\r\n                background:\"#ed6969\"\r\n                }}\r\n            variant=\"contained\" \r\n            color=\"primary\"\r\n            onClick={()=>generateRandomColors()}\r\n        >Random</Button>\r\n        {/* submit selectd colors */}\r\n        <Button \r\n            style={{\r\n                margin:\"5px 5px\",\r\n                background:\"#7b68ee\"\r\n                }}\r\n            variant=\"contained\" \r\n            color=\"primary\"\r\n            disabled={myColors.length !== num_colors &&true}\r\n            onClick={()=>props.onSubmit(myColors)}\r\n        >Done</Button>\r\n\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Setting","import React from \"react\";\r\nimport {GiBrainstorm} from \"react-icons/gi\"\r\n\r\nfunction Header() {\r\n  return (\r\n    <header>\r\n      <h1>\r\n        <GiBrainstorm/>\r\n        Mastermind\r\n      </h1>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\nfunction Footer() {\r\n  const year = 2020;\r\n  const name = \"Kim Minki\"\r\n  return (\r\n    <footer>\r\n      <p>Created by {name} ⓒ {year}</p>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\"\r\nimport { VscSymbolColor } from \"react-icons/vsc\";\r\nimport { GrLocationPin } from \"react-icons/gr\";\r\nimport { TiPin } from \"react-icons/ti\";\r\nimport { HiCursorClick } from \"react-icons/hi\";\r\n\r\nfunction Sider(){\r\n    return (\r\n    <div>\r\n        <div className=\"sider\">\r\n            <TiPin/>\r\n            <hr/>\r\n            <h3>color match</h3><VscSymbolColor/>\r\n            <h3>position match</h3><GrLocationPin/>\r\n        </div>\r\n        <div className=\"sider\">\r\n            <TiPin/>\r\n            <hr/>\r\n            <h3>Click to<br/>add/remove <br/>color</h3><HiCursorClick/>\r\n            \r\n        </div>\r\n        \r\n    </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Sider","import React, {useState} from \"react\";\nimport Colors from \"./Colors\";\nimport Button from '@material-ui/core/Button';\n\nfunction Round(props) {\n  const [round, setRound] = useState([])\n  const num_code = props.numCode\n  \n\n  function addColor(color){\n    setRound((prevItems)=> [...prevItems, color])\n  }\n\n  function deleteColor(_,target){\n    setRound((prevItems)=> {\n        return prevItems.filter((_,index) => index!==target)\n    })\n  }\n\n\n  return (\n    <div>\n      {/* show user's code */}\n      <div> \n        <br/>\n        <Colors \n          result = {props.result}\n          roundNumber = {props.roundNumber}\n          colors={props.isNewRound ? round : props.colors} \n          isCode={false}\n          isNewRound={props.isNewRound}\n          gameOver={props.gameOver}\n        // function deleteColor works only for new round \n          onPicked={deleteColor}\n          />\n      </div>\n      {/* new round: user guess code */}\n      { props.isNewRound && (\n      <div>\n        {/* show candidate colors */}\n        <div className=\"color-plate\"> \n          <Colors \n            colors={props.colors} \n            isCode={false}\n            onPicked={addColor}  \n            isNewRound={props.isNewRound}\n            gameOver={props.gameOver}\n            />\n        </div>\n        {/* submit user's code on click */}\n        <Button \n            style={{\n                margin:\"5px 5px\",\n                background:\"#7b68ee\"\n                }}\n            disabled={num_code !== round.length}\n            variant=\"contained\" \n            color=\"primary\"\n            onClick={()=> {\n              const new_round = round.slice()\n              setRound([])\n              return props.onSubmit(new_round)\n              \n            }}\n        >Done</Button>\n      </div>)}\n    </div>)\n\n}\n\nexport default Round;\n","import React, {useState} from \"react\";\nimport Colors from \"./Colors\";\nimport Setting from \"./Setting/Setting\";\nimport Header from \"./Header/Header\"\nimport Footer from \"./Footer/Footer\"\nimport Sider from \"./Sider/Sider\"\nimport Round from \"./Round\"\n\nfunction App() {\n  const [colors, setColors] = useState([])\n  const [code, setCode] = useState([4])\n  const [rounds, setRounds] = useState([])\n  const [results, setResults] = useState([])\n  const [gameOver, setGameOver] = useState(false)\n  const numCode = 4\n  const numColors = 8\n\n  function handleSetting(colors){\n    setColors(colors)\n    setCode((prevValue) => {\n      var newCode = []\n      for(var i=0; i<prevValue; i++){\n        newCode.push(colors[Math.floor(Math.random()*colors.length)])\n      }\n      return newCode\n    })\n  }\n\n  function finishRound(round){\n    \n    var positionMatch = 0\n    var matchingColors = code.filter((nth,index) =>\n    {\n      nth===round[index] && positionMatch++\n      return round.includes(nth)\n    })\n    var colorMatch = [...new Set(matchingColors)].length\n    const result = [positionMatch,colorMatch]\n    \n\n    setRounds((prevRounds) => [...prevRounds, round])\n    setResults((prevResults) => [...prevResults, result])\n    \n    if (JSON.stringify(round)===JSON.stringify(code)) setGameOver(true)\n  }\n\n  return (\n    <div>\n      <Header/>\n      {!colors.length \n      ?\n      <Setting onSubmit={handleSetting} numColors={numColors}/> \n      :\n      <div>\n        \n        {/* show generated code (color not visible)*/}\n        <div className=\"color-plate\"> \n          <h3>Target Code</h3>\n          <Colors colors={code} isCode={true}/>\n        </div>\n        \n        {/* show user's answer and result for each round */}\n        <div className=\"color-plate\"> \n          <h3>Your Code</h3>\n          {rounds.map((round,index)=> {\n            return <Round \n              key={index}\n              colors={round}\n              result={results[index]}\n              isNewRound={false}\n              roundNumber={index+1}\n              code = {code}\n              gameOver = {gameOver}\n              />\n            })}\n          {/* interface for user's new round */}\n          <Round \n            colors={colors} \n            numCode={numCode}\n            onSubmit={finishRound}\n            isNewRound={true}\n            roundNumber={rounds.length+1+\" (now)\"}\n            gameOver={gameOver}\n          />\n        </div>\n        \n      </div>\n\n      }\n      \n      <Sider/>\n      <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}